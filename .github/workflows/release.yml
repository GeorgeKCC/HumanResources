name: Manual Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Tipo de release (major, minor, patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # Necesario para crear tags/releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Muy importante para traer todos los tags

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "Ãšltimo tag encontrado: $latest_tag"

      - name: Bump version
        id: bump
        run: |
          version="${latest_tag#v}"
          major=$(echo $version | cut -d. -f1)
          minor=$(echo $version | cut -d. -f2)
          patch=$(echo $version | cut -d. -f3)

          case "${{ github.event.inputs.release_type }}" in
            major)
              major=$((major+1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor+1))
              patch=0
              ;;
            patch)
              patch=$((patch+1))
              ;;
          esac

          new_version="v$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "Nueva versiÃ³n generada: $new_version"

      # ğŸ”¹ Ejemplo con .NET (ajÃºstalo segÃºn tu proyecto)
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Build and publish
        run: |
          dotnet restore
          dotnet publish -c Release -o publish

      # ğŸ”¹ Empaquetar en ZIP
      - name: Package artifacts
        run: |
          cd publish
          zip -r ../release-${{ env.new_version }}.zip .

      # ğŸ”¹ Crear release y subir ZIP como asset
      - name: Create Release
        run: |
          gh release create "$new_version" \
            --title "$new_version" \
            --notes "Release $new_version generado manualmente" \
            "release-${{ env.new_version }}.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
